import pickle
import streamlit as st
from streamlit_option_menu import option_menu

# Load models
diabetes_model = pickle.load(open('C:/Users/manis/Desktop/MDPS Proj/Models/diabetes_model.sav', 'rb'))
heart_disease_model = pickle.load(open('C:/Users/manis/Desktop/MDPS Proj/Models/heart_disease_model.sav', 'rb'))
parkinsons_model = pickle.load(open('C:/Users/manis/Desktop/MDPS Proj/Models/parkinsons_model.sav', 'rb'))

# App title
st.set_page_config(page_title="Disease Predictor", layout="wide")
st.title("🧠 Multiple Disease Prediction System")
st.markdown("Use the **sidebar** to choose a prediction model.")

# Sidebar menu
with st.sidebar:
    selected = option_menu("Choose Test",
                           ["Diabetes Prediction", "Heart Disease Prediction", "Parkinsons Prediction"],
                           icons=['droplet-half', 'heart-pulse', 'activity'],
                           default_index=0)

#Diabetes Page
if selected == "Diabetes Prediction":
    st.header("💉 Diabetes Prediction")

    with st.expander("👤 Enter Patient Data"):
        col1, col2, col3 = st.columns(3)

        with col1:
            Pregnancies = st.number_input("Number of Pregnancies", 0, 20, 1)
        with col2:
            Glucose = st.slider("Glucose Level", 0, 300, 120)
        with col3:
            BloodPressure = st.slider("Blood Pressure (mm Hg)", 0, 150, 80)

        with col1:
            SkinThickness = st.slider("Skin Thickness (mm)", 0, 100, 28)
        with col2:
            Insulin = st.slider("Insulin Level", 0, 900, 85)
        with col3:
            BMI = st.number_input("BMI", 10.0, 60.0, 32.0)

        with col1:
            DiabetesPedigreeFunction = st.number_input("Diabetes Pedigree Function", 0.0, 2.5, 0.5)
        with col2:
            Age = st.slider("Age", 1, 100, 35)

    diab_diagnosis = ""

    if st.button("🧪 Predict Diabetes"):
        user_input = [Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin,
                      BMI, DiabetesPedigreeFunction, Age]
        prediction = diabetes_model.predict([user_input])
        if prediction[0] == 1:
            diab_diagnosis = "The person is **diabetic**"
            st.error(diab_diagnosis)
        else:
            diab_diagnosis = "The person is **not diabetic**"
            st.success(diab_diagnosis)

#Heart Disease Page
elif selected == "Heart Disease Prediction":
    st.header("❤️ Heart Disease Prediction")

    with st.expander("👤 Enter Patient Data"):
        col1, col2, col3 = st.columns(3)
        with col1:
            age = st.slider("Age", 1, 100, 45)
        with col2:
            sex = st.selectbox("Sex (0=Female, 1=Male)", [0, 1])
        with col3:
            cp = st.selectbox("Chest Pain Type (0–3)", [0, 1, 2, 3])
        with col1:
            trestbps = st.number_input("Resting Blood Pressure", 80, 200, 130)
        with col2:
            chol = st.number_input("Cholesterol (mg/dl)", 100, 600, 240)
        with col3:
            fbs = st.selectbox("Fasting Blood Sugar > 120 mg/dl (1=True)", [0, 1])
        with col1:
            restecg = st.selectbox("Resting ECG (0–2)", [0, 1, 2])
        with col2:
            thalach = st.number_input("Max Heart Rate", 60, 220, 150)
        with col3:
            exang = st.selectbox("Exercise Induced Angina (1=True)", [0, 1])
        with col1:
            oldpeak = st.number_input("Oldpeak", 0.0, 6.0, 1.0)
        with col2:
            slope = st.selectbox("Slope (0–2)", [0, 1, 2])
        with col3:
            ca = st.selectbox("Major vessels colored (0–4)", [0, 1, 2, 3, 4])
        with col1:
            thal = st.selectbox("Thal (1=Fixed, 2=Normal, 3=Reversible)", [1, 2, 3])

    heart_diagnosis = ""

    if st.button("🧪 Predict Heart Disease"):
        user_input = [age, sex, cp, trestbps, chol, fbs,
                      restecg, thalach, exang, oldpeak, slope, ca, thal]
        prediction = heart_disease_model.predict([user_input])
        if prediction[0] == 1:
            heart_diagnosis = "The person **has heart disease**"
            st.error(heart_diagnosis)
        else:
            heart_diagnosis = "The person **does not have heart disease**"
            st.success(heart_diagnosis)

#Parkinson's Page
elif selected == "Parkinsons Prediction":
    st.header("🧠 Parkinson's Disease Prediction")

    with st.expander("👤 Enter Patient Data"):
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1: fo = st.number_input('MDVP:Fo(Hz)', 60.0, 400.0, 120.0)
        with col2: fhi = st.number_input('MDVP:Fhi(Hz)', 100.0, 500.0, 150.0)
        with col3: flo = st.number_input('MDVP:Flo(Hz)', 60.0, 300.0, 90.0)
        with col4: Jitter_percent = st.number_input('MDVP:Jitter(%)', 0.0, 1.0, 0.003)
        with col5: Jitter_Abs = st.number_input('MDVP:Jitter(Abs)', 0.0, 0.1, 0.00005)
        with col1: RAP = st.number_input('MDVP:RAP', 0.0, 0.1, 0.002)
        with col2: PPQ = st.number_input('MDVP:PPQ', 0.0, 0.1, 0.002)
        with col3: DDP = st.number_input('Jitter:DDP', 0.0, 0.1, 0.006)
        with col4: Shimmer = st.number_input('MDVP:Shimmer', 0.0, 1.0, 0.03)
        with col5: Shimmer_dB = st.number_input('MDVP:Shimmer(dB)', 0.0, 3.0, 0.25)
        with col1: APQ3 = st.number_input('Shimmer:APQ3', 0.0, 1.0, 0.02)
        with col2: APQ5 = st.number_input('Shimmer:APQ5', 0.0, 1.0, 0.03)
        with col3: APQ = st.number_input('MDVP:APQ', 0.0, 1.0, 0.04)
        with col4: DDA = st.number_input('Shimmer:DDA', 0.0, 1.0, 0.07)
        with col5: NHR = st.number_input('NHR', 0.0, 1.0, 0.02)
        with col1: HNR = st.number_input('HNR', 0.0, 50.0, 20.0)
        with col2: RPDE = st.number_input('RPDE', 0.0, 1.0, 0.45)
        with col3: DFA = st.number_input('DFA', 0.0, 1.0, 0.7)
        with col4: spread1 = st.number_input('Spread1', -10.0, 0.0, -5.5)
        with col5: spread2 = st.number_input('Spread2', 0.0, 1.0, 0.3)
        with col1: D2 = st.number_input('D2', 0.0, 5.0, 2.5)
        with col2: PPE = st.number_input('PPE', 0.0, 1.0, 0.2)

    parkinsons_diagnosis = ""

    if st.button("🧪 Predict Parkinson's Disease"):
        user_input = [fo, fhi, flo, Jitter_percent, Jitter_Abs, RAP, PPQ, DDP,
                      Shimmer, Shimmer_dB, APQ3, APQ5, APQ, DDA, NHR, HNR,
                      RPDE, DFA, spread1, spread2, D2, PPE]
        prediction = parkinsons_model.predict([user_input])
        if prediction[0] == 1:
            parkinsons_diagnosis = "The person **has Parkinson's disease**"
            st.error(parkinsons_diagnosis)
        else:
            parkinsons_diagnosis = "The person **does not have Parkinson's disease**"
            st.success(parkinsons_diagnosis)
